Erik Merrill
Mission 5
Part 1

1. 2n^3 - 7n^2 + 100 n -3 6 is in O(n^3)
	c > 0, c is 2, 2n^3 >= 2n^3 - 7n^2 = 100n - 36
	n >= 1, n is 1

2. 10n + 3log(n) is in O(n)
	3log(n) grows more slowly than 10n
	10n <= 10n
	c > 0 is 10
	n is 1

3. n/1000 is in O(1)
	c > 0 is 1
	n >= 1000 is
	n/1000 <= cn/1000 
	since n/1000 is 1 operation, n/1000 is in O(1)

4. log(n)^2 + log(n)/30 is in O(log(n)^2)
	log(n)^2 is the dominant part of the equation
	c > 0 is 2
	n >= 1 is 1
	log(n)^2 <= log(2n)^2 for all n >= 1
	
	
5. n^2/log(n) + 3n is in O(n^2)
	3n is the most impactful part of the equation
	n^2/log(n) + 3n is in O(n^2)
	n^2/log(n) <= 9n^2 for all n >= 1
	c is 9

6. 36n is in O(n)
7. n^2/2 + 15n is in O(n^2)
8. (n^2/4)(8/n) is in O(n)
9. n + 10log(n) is in O(n)
10. 87262 is in O(1)

11.
public int m1FindLargest(int[] array) {
    if (array.length != 0) {
        int value = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > value) {
                value = array[i];
            }
        }
        return value;
    }
    return -1;
}

O(n)

12.
public void m2PrintTriangle(int size) {
    for (int i = 1; i <= size; i++) {
        for (int j = 1; j <= i; j++) {
            System.out.print("*");
        }
        System.out.println();
    }
}

O(n^2)

13.
public void m3PrintBooks(String books[], int[] stars) {
    if (books.length == stars.length) {
        for (int i = 0; i < books.length; i++) {
            System.out.print(books[i] + "'s stars: ");
            for (int j = 0; j < stars[i]; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

O(n^2)
	
